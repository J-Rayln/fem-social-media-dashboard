@use 'sass:math' as math;

// functions.scss



// calcluate rem units for pixel values
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// --- calculateions assume defauly font size of 1rem/em = 16px
// 
// --- to calculate rems based on a DIFFERENT base font size, include
//     the second argument.
// 
//  ex: rem(30, 15) gives a result of (30 / 15) = 2rem
//      rem(30) gives a result of (30 / 16) = 1.875rem

@function rem($pixels, $base-size: 16) {
    @if math.is-unitless($pixels) {
        @return math.div($pixels, $base-size) * 1rem;
    } @else {
        @error "Pixel values must be an integer.  Do not include \"px,\" \"rem,\" or other units.";
    }
}

@function em($pixels, $base-size: 16) {
    @if math.is-unitless($pixels) {
        @return math.div($pixels, $base-size) * 1em;
    } @else {
        @error "Pixel values must be an integer.  Do not include \"px,\" \"em,\" or other units.";
    }
}

// Returns a CSS clamp function which resolves to $size-at-min-width when page width is 
// below $min-width, 
// $size-at-max-width when page width is above $max-width, 
// and linearly scales between the two between $min-width and $max-width

@function clamp-calc($min-width, $max-width, $size-at-min-width, $size-at-max-width) {
    $slope: calc(($size-at-max-width - $size-at-min-width) / ($max-width - $min-width));
    $y-axis-intersection: -1 * $min-width * $slope + $size-at-min-width;
    $return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});
    @return $return-value;
}